package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER;
nonterminal NodoC3D inicial, expresion;
terminal ORR,ANDD, IGUALIGUAL,NOIGUAL,MAYORQUE,MENORQUE,MAYORIGUAL,MENORIGUAL,NOTT;
precedence left ORR;
precedence left ANDD;
precedence left IGUALIGUAL, NOIGUAL,MAYORQUE,MENORQUE,MAYORIGUAL,MENORIGUAL;
precedence left NOTT;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} expresion:exp
                    {:  
                        RESULT = exp;
                        if(exp.getV() == null && exp.getF() == null){
                            ControlC3D.agregarC3D("//Ãšltimo valor: " + exp.getCad());
                        }else{
                            ControlC3D.agregarC3D("//Etiqueta(s) de verdadero: " + exp.getV() + "\n" + "//Etiqueta(s) de falso: " + exp.getF());
                            }
                    :};

expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq ORR{: "" + ":\n"; ControlC3D.agregarC3D(c3d); :} expresion:der
                    {: 
                        String etqv = izq.getV() + "," + der.getV();
                        String etqf = der.getF();
                        RESULT = new NodoC3D("",etqv,etqf);  
                    :}
            
            |   expresion:izq ANDD expresion:der
                    {: 
                        String etqv = der.getV() ;
                        String etqf = izq.getF() + "," + der.getF();
                        RESULT = new NodoC3D("",etqv,etqf);  
                    :}
                        
            |   expresion:izq IGUALIGUAL expresion:der
                    {: 
                       String etqv = ControlC3D.generaEtitqueta();
                        String etqf = ControlC3D.generaEtitqueta();
                        String temp = ControlC3D.generaTemp();
                        String c3d = "if(" + izq.getCad() + " == " + der.getCad() + ") goto " + etqv + ";\ngoto " + etqf + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,etqv,etqf); 
                    :}
            |   expresion:izq NOIGUAL expresion:der
                    {: 
                        String etqv = ControlC3D.generaEtitqueta();
                        String etqf = ControlC3D.generaEtitqueta();
                        String temp = ControlC3D.generaTemp();
                        String c3d = "if(" + izq.getCad() + " != " + der.getCad() + ") goto " + etqv + ";\ngoto " + etqf + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,etqv,etqf);
                    :}
            
            
            |   expresion:izq MAYORQUE expresion:der
                    {: 
                        String etqv = ControlC3D.generaEtitqueta();
                        String etqf = ControlC3D.generaEtitqueta();
                        String temp = ControlC3D.generaTemp();
                        String c3d = "if(" + izq.getCad() + " > " + der.getCad() + ") goto " + etqv + ";\ngoto " + etqf + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,etqv,etqf);  
                    :}
           
            |   expresion:izq MENORQUE expresion:der
                    {: 
                        String etqv = ControlC3D.generaEtitqueta();
                        String etqf = ControlC3D.generaEtitqueta();
                        String temp = ControlC3D.generaTemp();
                        String c3d = "if(" + izq.getCad() + " < " + der.getCad() + ") goto " + etqv + ";\ngoto " + etqf + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,etqv,etqf);   
                    :}

            |   expresion:izq MAYORIGUAL expresion:der
                    {: 
                        String etqv = ControlC3D.generaEtitqueta();
                        String etqf = ControlC3D.generaEtitqueta();
                        String temp = ControlC3D.generaTemp();
                        String c3d = "if(" + izq.getCad() + " >= " + der.getCad() + ") goto " + etqv + ";\ngoto " + etqf + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,etqv,etqf); 
                    :}
           
            |   expresion:izq MENORIGUAL expresion:der
                    {: 
                        String etqv = ControlC3D.generaEtitqueta();
                        String etqf = ControlC3D.generaEtitqueta();
                        String temp = ControlC3D.generaTemp();
                        String c3d = "if(" + izq.getCad() + " <= " + der.getCad() + ") goto " + etqv + ";\ngoto " + etqf + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp,etqv,etqf); 
                    :}

            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   NOTT  expresion:der
                    {: 
                        
                        RESULT = new NodoC3D("",der.getF(),der.getV()); 
                    :}
           
            |   PAR_IZQ expresion:exp PAR_DER
                     {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;